# -*- coding: utf-8 -*-
"""Air Quality Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ROfIOEI9XRsAFVKy2FW_m3XPTcljnNf
"""

# Install necessary package
# !pip install termcolor

# 📦 Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from termcolor import colored

# 📥 Load the dataset
data = pd.read_csv('city_day.csv')  # Make sure the file is uploaded in Colab

# 🏙️ City Selection and Forecast Horizon
selected_city = "Delhi"
days_to_forecast = 7

# 🔍 Extract data for the chosen city
filtered_data = data[data['City'].str.lower() == selected_city.lower()]
filtered_data = filtered_data[['Date', 'AQI']].dropna()
filtered_data['Date'] = pd.to_datetime(filtered_data['Date'])
filtered_data = filtered_data.sort_values('Date')

# 🔄 Create lag-based features for prediction
for_prediction = filtered_data.copy()
for_prediction['Prev1'] = for_prediction['AQI'].shift(1)
for_prediction['Prev2'] = for_prediction['AQI'].shift(2)
for_prediction['Prev3'] = for_prediction['AQI'].shift(3)
for_prediction.dropna(inplace=True)

# 🔢 Define input and output
features = for_prediction[['Prev1', 'Prev2', 'Prev3']]
target = for_prediction['AQI']

# 📊 Split the dataset
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=False)

# 🧠 Train the regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# 🔮 Generate AQI Predictions for Future Days
recent_aqi_values = list(for_prediction['AQI'].tail(3))
forecast_results = []

for _ in range(days_to_forecast):
    next_input = np.array(recent_aqi_values[-3:]).reshape(1, -1)
    forecast = regressor.predict(next_input)[0]
    forecast_results.append(forecast)
    recent_aqi_values.append(forecast)

# 🌈 Define a function to classify AQI
def classify_aqi(aqi_value):
    if aqi_value <= 50:
        return colored("Good", "green")
    elif aqi_value <= 100:
        return colored("Satisfactory", "blue")
    elif aqi_value <= 200:
        return colored("Moderate", "yellow")
    elif aqi_value <= 300:
        return colored("Poor", "magenta")
    elif aqi_value <= 400:
        return colored("Very Poor", "red")
    else:
        return colored("Severe", "red", attrs=["bold"])

# 📃 Display the prediction output
print(f"\n📌 AQI Forecast for {selected_city.title()} - Coming {days_to_forecast} Days:\n")
for i, value in enumerate(forecast_results, 1):
    category = classify_aqi(value)
    print(f"Day {i}: AQI = {round(value, 2)} → {category}")

# 📈 Plot the predicted values
plt.figure(figsize=(10, 4))
plt.plot(range(1, days_to_forecast + 1), forecast_results, marker='o', color='orange', linestyle='--')
plt.title(f"AQI Forecast: {selected_city.title()} - Next {days_to_forecast} Days")
plt.xlabel("Day")
plt.ylabel("Predicted AQI")
plt.grid(True)
plt.tight_layout()
plt.show()